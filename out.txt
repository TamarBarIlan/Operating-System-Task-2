							argv[i] = argv[k];
						argv[i] = NULL;
		argv[i] = NULL;
			argv[i] = token;
					argv[j] = NULL;
					argv[j] = NULL;
					break;
					break;
	char *argv[10];
	char command[1024];
						char *left[10];
					char *text = argv[j + 1];
					char *text = argv[j + 1];
	char *token;
					close(out);
					close(outA);
						close(p[0]);
						close(p[0]);
						close(p[1]);
						close(p[1]);
		command[strlen(command) - 1] = '\0'; // replace \n with \0
			continue;
					dup2(outA, STDOUT_FILENO);
					dup2(out, STDOUT_FILENO);
			execvp(argv[0], argv);
						execvp(left[0], left);
							exit(1);
							exit(1);
						exit(1);
						exit(1);
			exit(1);
		fgets(command, 1024, stdin);
			for (int j = 0; argv[j] != NULL; j++)
						for (int k = j + 1; argv[k] != NULL; k++)
							i++;
							i++;
			i++;
		i = 0;
						int dup1 = dup2(p[1], 1);
						int dup = dup2(p[0], 0);
	int i;
						int i = 0;
						int i = 0;
					int outA = open(text, O_WRONLY | O_CREAT | O_APPEND, S_IRUSR | S_IWUSR);
					int out = open(text, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
					int p[2];
						j = -1; ///////////////////////
							left[i] = argv[i];
						left[i] = NULL;
					pid_t pid2 = fork();
		pid_t pid = fork();
		printf("\033[0m"); // Reset the text color to the default
		printf("\033[1;32m"); // Set the text color to green and bold
		printf("stshell> ");
			return 0;
	signal(SIGINT, handle_signail); // for ignore if get ctrl+c
			signal(SIGINT, SIG_DFL); // for do a difult ctrl+c
		token = strtok(command, " ");
			token = strtok(NULL, " ");
						wait(NULL);
		wait(NULL);
